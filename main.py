from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from langchain.memory import CassandraChatMessageHistory, ConversationBufferMemory
from langchain.llms import OpenAI
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
import json

# This secure connect bundle is autogenerated when you donwload your SCB, 
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': 'secure-connect-ai-adventure.zip'
}

# This token json file is autogenerated when you donwload your token, 
# if yours is different update the file name below
with open("AI_adventure-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]
ASTRA_DB_KEYSPACE = "database"
OPENAI_API_KEY = "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"

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

message_history = CassandraChatMessageHistory(
    session_id="unique",
    session=session,
    keyspace=ASTRA_DB_KEYSPACE,
    ttl_seconds=3600 #time to delete data in seconds. 3600 = hr
)

message_history.clear()

cass_buff_memory = ConversationBufferMemory(
    memory_key="chat_history",
    chat_memory=message_history
)

template = """
You are now the guide of a mystical journey in the Stanky Woodlands.
Tunalesca (Tuna for shorthand name), is a mystical beautiful forest kitty on a journey in the stanky woods. She seeks the fabled cricket of serenity because her favorite snack is crickets, and the cricket of serenity is said to give the kitty who snacks on it the power to control when the cats get fed dinner from their parents. You must navigate her through challenges, choices, and consequences, dynamically adapting the tale based on Tunalesca's decisions. Your goal is to create a branching narrative experience where each choice leads to a new path, ultimately determing Tunalesca's fate.

Here are some rules to follow:
1. Start by asking the player to choose some kind of magical trinket. Assign that trinket goofy traits based on the name. 
2. have a few paths that lead to success, where Tunalesca finds the cricket.
3. have some paths that lead to failure, where tunas parents find her and bring her home without finding the cricket. Try to make the scenarios fantastic and goofy. Try to have the game last 5 or more scenarios.
4. If the user fails generate a response that explains the failure and ends in the text: "Tuna gotta wait." I will look for this to end the game.

Here is the chat history, use this to understand what to say next: {chat_history}
Human: {human_input}
AI:
"""

prompt = PromptTemplate(
    input_variables=["chat_history", "human_input"],
    template=template
)

llm = OpenAI(openai_api_key=OPENAI_API_KEY)
llm_chain = LLMChain(
    llm=llm,
    prompt=prompt,
    memory=cass_buff_memory
)

choice = "start"
while True:
    response = llm_chain.predict(human_input=choice)
    print(response.strip())

    if "Tuna gotta wait" in response:
        break

    choice = input("Your reply: ")

